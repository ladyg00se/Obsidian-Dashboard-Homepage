/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var c=Object.defineProperty;var k=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var y=Object.prototype.hasOwnProperty;var v=(g,a)=>{for(var t in a)c(g,t,{get:a[t],enumerable:!0})},m=(g,a,t,s)=>{if(a&&typeof a=="object"||typeof a=="function")for(let i of T(a))!y.call(g,i)&&i!==t&&c(g,i,{get:()=>a[i],enumerable:!(s=k(a,i))||s.enumerable});return g};var S=g=>m(c({},"__esModule",{value:!0}),g);var C={};v(C,{default:()=>o});module.exports=S(C);var n=require("obsidian"),p="kikijiki-habit-tracker-view",E={tagPrefix:"habit",habits:[]},o=class extends n.Plugin{async onload(){await this.loadSettings(),this.addSettingTab(new u(this.app,this)),this.registerView(p,t=>new f(t,this)),this.addCommand({id:"open-panel",name:"Open panel",callback:()=>{this.activateView()}}),this.registerEvent(this.app.workspace.on("active-leaf-change",()=>{var s;let t=(s=this.app.workspace.getLeavesOfType(p)[0])==null?void 0:s.view;t&&t.render()}))}async activateView(){let t=this.app.workspace.getRightLeaf(!1);t||(t=this.app.workspace.getRightLeaf(!0)),t&&(t.setViewState({type:p,active:!0}),this.app.workspace.revealLeaf(t))}onunload(){}async loadSettings(){this.settings=Object.assign({},E,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}},u=class extends n.PluginSettingTab{constructor(t,s){super(t,s);this.plugin=s}display(){let{containerEl:t}=this;t.empty(),new n.Setting(t).setName("Tag prefix").setDesc("Prefix for tags, the final tag will be <prefix>/<habit>.").addText(s=>s.setPlaceholder("Enter tag prefix").setValue(this.plugin.settings.tagPrefix).onChange(async i=>{this.plugin.settings.tagPrefix=i,await this.plugin.saveSettings()})),new n.Setting(t).setName("Habits").setDesc("List of habits that will appear in the panel."),this.plugin.settings.habits.forEach((s,i)=>{let h=new n.Setting(t).setName(`#${i+1}`).addText(e=>e.setValue(s).setPlaceholder("Enter habit name").onChange(async r=>{this.plugin.settings.habits[i]=r.trim(),await this.plugin.saveSettings()}));h.addButton(e=>{e.setIcon("arrow-up").setTooltip("Move up").setDisabled(i===0).onClick(async()=>{if(i>0){let r=this.plugin.settings.habits[i];this.plugin.settings.habits[i]=this.plugin.settings.habits[i-1],this.plugin.settings.habits[i-1]=r,await this.plugin.saveSettings(),this.display()}})}),h.addButton(e=>{e.setIcon("arrow-down").setTooltip("Move down").setDisabled(i===this.plugin.settings.habits.length-1).onClick(async()=>{if(i<this.plugin.settings.habits.length-1){let r=this.plugin.settings.habits[i];this.plugin.settings.habits[i]=this.plugin.settings.habits[i+1],this.plugin.settings.habits[i+1]=r,await this.plugin.saveSettings(),this.display()}})}),h.addButton(e=>{e.setIcon("trash").setTooltip("Remove").onClick(async()=>{this.plugin.settings.habits.splice(i,1),await this.plugin.saveSettings(),this.display()})})}),new n.Setting(t).setName("Add new habit").addButton(s=>{s.setIcon("plus").setTooltip("Add habit").onClick(async()=>{this.plugin.settings.habits.push(""),await this.plugin.saveSettings(),this.display()})})}},f=class extends n.ItemView{constructor(t,s){super(t);this.settings=[];this.currentFile=null;this.plugin=s}getViewType(){return p}getDisplayText(){return"Habit tracker"}getIcon(){return"checkbox-glyph"}async onOpen(){this.render()}async onClose(){this.clearSettings()}clearSettings(){this.settings.forEach(t=>t.settingEl.remove()),this.settings=[]}async render(){var r;let{contentEl:t}=this,s=this.app.workspace.getActiveFile();if((s==null?void 0:s.path)===this.currentFile)return;if(this.currentFile=(r=s==null?void 0:s.path)!=null?r:null,t.empty(),this.clearSettings(),!s){t.setText("No file is open");return}let i=this.app.metadataCache.getFileCache(s),e=((i==null?void 0:i.frontmatter)||{}).tags||[];this.plugin.settings.habits.forEach(l=>{if(!l||l.trim()==="")return;let d=`${this.plugin.settings.tagPrefix}/${l}`,b=new n.Setting(t).setName(l).addToggle(w=>{w.setValue(e.includes(d)),w.onChange(this.createToggleHandler(s,d))});this.settings.push(b)})}createToggleHandler(t,s){return async i=>{await this.app.fileManager.processFrontMatter(t,h=>{let e=h.tags||[];i&&!e.includes(s)?e.push(s):!i&&e.includes(s)&&(e=e.filter(r=>r!==s)),h.tags=e})}}};

/* nosourcemap */